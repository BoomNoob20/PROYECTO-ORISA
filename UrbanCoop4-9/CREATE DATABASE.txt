-- ========================================
-- SCRIPT COMPLETO URBAN COOP DATABASE
-- Versión corregida usando tabla 'usuario' 
-- Compatible con admin.php
-- ========================================

-- Crear la base de datos si no existe
CREATE DATABASE IF NOT EXISTS usuarios_urban_coop 
CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

-- Usar la base de datos
USE usuarios_urban_coop;

-- ========================================
-- ELIMINAR TABLAS EXISTENTES (solo si hay problemas)
-- Descomenta las siguientes líneas solo si necesitas empezar desde cero
-- ========================================
-- DROP TABLE IF EXISTS comprobantes_pago;
-- DROP TABLE IF EXISTS horas_trabajadas;
-- DROP TABLE IF EXISTS usuario;

CREATE TABLE IF NOT EXISTS usuario (
    id INT(11) NOT NULL AUTO_INCREMENT,
    usr_name VARCHAR(100) NOT NULL COMMENT 'Nombre del usuario',
    usr_surname VARCHAR(100) NOT NULL COMMENT 'Apellido del usuario', 
    usr_email VARCHAR(100) NOT NULL COMMENT 'Email del usuario',
    usr_pass VARCHAR(100) NOT NULL COMMENT 'Contraseña',
    usr_ci INT(11) NOT NULL COMMENT 'Cédula de identidad',
    usr_phone INT(11) NOT NULL COMMENT 'Teléfono',
    is_admin INT(11) NOT NULL DEFAULT 0 COMMENT '0=Usuario normal, 1=Administrador',
    estado INT(11) NOT NULL DEFAULT 1 COMMENT '1=Pendiente, 2=Aprobado, 3=Rechazado',
    PRIMARY KEY (id),
    UNIQUE KEY usr_email (usr_email),
    UNIQUE KEY usr_ci (usr_ci),
    INDEX idx_estado (estado),
    INDEX idx_admin (is_admin)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
COMMENT='Tabla principal de usuarios del sistema Urban Coop';

-- ========================================
-- CREAR TABLA HORAS TRABAJADAS
-- ========================================
CREATE TABLE IF NOT EXISTS horas_trabajadas (
    id INT NOT NULL AUTO_INCREMENT,
    user_id INT NOT NULL COMMENT 'ID del usuario que registró las horas',
    work_date DATE NOT NULL COMMENT 'Fecha del trabajo realizado',
    hours_worked DECIMAL(4,2) NOT NULL COMMENT 'Horas trabajadas (con decimales)',
    description TEXT NOT NULL COMMENT 'Descripción del trabajo realizado',
    work_type VARCHAR(50) NOT NULL COMMENT 'Tipo de trabajo (Mantenimiento, Limpieza, etc.)',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT 'Fecha de creación del registro',
    PRIMARY KEY (id),
    FOREIGN KEY (user_id) REFERENCES usuario(id) ON DELETE CASCADE ON UPDATE CASCADE,
    UNIQUE KEY unique_user_date (user_id, work_date) COMMENT 'Un usuario puede registrar solo una vez por día',
    INDEX idx_user_id (user_id),
    INDEX idx_work_date (work_date),
    INDEX idx_work_type (work_type)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
COMMENT='Registro de horas trabajadas por cada usuario';

-- ========================================
-- CREAR TABLA COMPROBANTES DE PAGO
-- ========================================
CREATE TABLE IF NOT EXISTS comprobantes_pago (
    id INT NOT NULL AUTO_INCREMENT,
    user_id INT NOT NULL COMMENT 'ID del usuario que subió el comprobante',
    payment_month VARCHAR(2) NOT NULL COMMENT 'Mes del pago (01-12)',
    payment_year VARCHAR(4) NOT NULL COMMENT 'Año del pago',
    file_name VARCHAR(255) NOT NULL COMMENT 'Nombre original del archivo',
    file_path VARCHAR(500) NOT NULL COMMENT 'Ruta donde se almacena el archivo',
    file_size INT NOT NULL COMMENT 'Tamaño del archivo en bytes',
    file_type VARCHAR(50) NOT NULL COMMENT 'Tipo MIME del archivo',
    description TEXT COMMENT 'Descripción opcional del comprobante',
    status ENUM('pendiente', 'aprobado', 'rechazado') DEFAULT 'pendiente' COMMENT 'Estado del comprobante',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT 'Fecha de subida',
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'Fecha de última actualización',
    PRIMARY KEY (id),
    FOREIGN KEY (user_id) REFERENCES usuario(id) ON DELETE CASCADE ON UPDATE CASCADE,
    UNIQUE KEY unique_user_month_year (user_id, payment_month, payment_year) COMMENT 'Un comprobante por usuario por mes/año',
    INDEX idx_user_id (user_id),
    INDEX idx_status (status),
    INDEX idx_payment_date (payment_year, payment_month),
    INDEX idx_file_type (file_type)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
COMMENT='Comprobantes de pago subidos por los usuarios';

-- ========================================
-- INSERTAR DATOS DE EJEMPLO
-- ========================================

-- Usuario administrador
INSERT INTO usuario (usr_name, usr_surname, usr_email, usr_pass, usr_ci, usr_phone, is_admin, estado) 
VALUES ('a', 'b', 'ab@gmail.com', 'e10adc3949ba59abbe56e057f20f883e', 12345678, 99999999, 1, 2)
ON DUPLICATE KEY UPDATE 
    usr_name = VALUES(usr_name),
    usr_surname = VALUES(usr_surname),
    is_admin = VALUES(is_admin),
    estado = VALUES(estado);

-- Usuarios pendientes de ejemplo
INSERT INTO usuario (usr_name, usr_surname, usr_email, usr_pass, usr_ci, usr_phone, is_admin, estado) VALUES 
('Pedro', 'Garfhone', 'pedro@gmail.com', 'e10adc3949ba59abbe56e057f20f883e', 24966853, 93658842, 0, 1),
('María', 'González', 'maria@gmail.com', 'e10adc3949ba59abbe56e057f20f883e', 25123456, 94567890, 0, 1),
('Juan', 'Pérez', 'juan@gmail.com', 'e10adc3949ba59abbe56e057f20f883e', 26789012, 95123456, 0, 1),
('Ana', 'López', 'ana@gmail.com', 'e10adc3949ba59abbe56e057f20f883e', 27345678, 96789012, 0, 1),
('Carlos', 'Rodríguez', 'carlos@gmail.com', 'e10adc3949ba59abbe56e057f20f883e', 28901234, 97345678, 0, 1),
('Laura', 'Martínez', 'laura@gmail.com', 'e10adc3949ba59abbe56e057f20f883e', 29567890, 98901234, 0, 1),
('Diego', 'Fernández', 'diego@gmail.com', 'e10adc3949ba59abbe56e057f20f883e', 30123456, 99567890, 0, 1),
('Sofia', 'Torres', 'sofia@gmail.com', 'e10adc3949ba59abbe56e057f20f883e', 31789012, 91234567, 0, 1)
ON DUPLICATE KEY UPDATE usr_name = VALUES(usr_name);

-- Horas trabajadas de ejemplo (algunas ya procesadas para mostrar diferentes estados)
INSERT INTO horas_trabajadas (user_id, work_date, hours_worked, description, work_type) VALUES 
(9, '2025-01-20', 6.5, 'Mantenimiento de jardines del área común principal', 'Mantenimiento'),
(2, '2025-01-21', 4.0, 'Limpieza profunda del salón de eventos', 'Limpieza'),
(3, '2025-01-22', 8.0, 'Reparación de grifería en baños comunes', 'Reparaciones'),
(4, '2025-01-23', 5.5, 'Organización de reunión de vecinos', 'Eventos'),
(5, '2025-01-24', 7.0, 'Pintura de paredes del hall de entrada', 'Mantenimiento'),
(6, '2025-01-25', 3.5, 'Limpieza de escaleras y pasillos', 'Limpieza'),
(7, '2025-01-26', 6.0, 'Instalación de luces LED en áreas comunes [APROBADO]', 'Mantenimiento'),
(8, '2025-01-27', 4.5, 'Mantenimiento de ascensores [RECHAZADO]', 'Mantenimiento')
ON DUPLICATE KEY UPDATE description = VALUES(description);

-- Comprobantes de pago de ejemplo
INSERT INTO comprobantes_pago (user_id, payment_month, payment_year, file_name, file_path, file_size, file_type, description, status) VALUES
(7, '01', '2025', 'comprobante_enero_pedro.pdf', 'uploads/comprobantes/1_01_2025.pdf', 245678, 'application/pdf', 'Comprobante de pago cooperativa enero 2025', 'pendiente'),
(2, '01', '2025', 'pago_enero_maria.jpg', 'uploads/comprobantes/2_01_2025.jpg', 189432, 'image/jpeg', 'Transferencia bancaria enero 2025', 'pendiente'),
(3, '12', '2024', 'diciembre_juan.pdf', 'uploads/comprobantes/3_12_2024.pdf', 321098, 'application/pdf', 'Último pago del año 2024', 'aprobado'),
(4, '01', '2025', 'enero_ana.png', 'uploads/comprobantes/4_01_2025.png', 156789, 'image/png', 'Captura de transferencia enero', 'pendiente'),
(5, '01', '2025', 'carlos_enero_2025.pdf', 'uploads/comprobantes/5_01_2025.pdf', 278945, 'application/pdf', 'Pago mensual cooperativa', 'pendiente'),
(6, '12', '2024', 'laura_diciembre.jpg', 'uploads/comprobantes/6_12_2024.jpg', 203456, 'image/jpeg', 'Pago diciembre 2024', 'rechazado')
ON DUPLICATE KEY UPDATE description = VALUES(description);

-- ========================================
-- VERIFICACIÓN Y ESTADÍSTICAS
-- ========================================

-- Mostrar resumen de la instalación
SELECT '=== RESUMEN DE LA INSTALACIÓN ===' as info;

-- Contar usuarios por estado
SELECT 
    'USUARIOS POR ESTADO' as categoria,
    CASE estado 
        WHEN 1 THEN 'Pendientes'
        WHEN 2 THEN 'Aprobados' 
        WHEN 3 THEN 'Rechazados'
    END as estado_desc,
    COUNT(*) as cantidad
FROM usuario 
GROUP BY estado
ORDER BY estado;

-- Contar comprobantes por estado
SELECT 
    'COMPROBANTES POR ESTADO' as categoria,
    status as estado,
    COUNT(*) as cantidad
FROM comprobantes_pago 
GROUP BY status;

-- Mostrar horas trabajadas recientes
SELECT 
    'HORAS TRABAJADAS RECIENTES' as categoria,
    u.usr_name,
    u.usr_surname,
    ht.work_date,
    ht.hours_worked,
    ht.work_type,
    CASE 
        WHEN ht.description LIKE '%[APROBADO]%' THEN 'Aprobado'
        WHEN ht.description LIKE '%[RECHAZADO]%' THEN 'Rechazado'
        ELSE 'Pendiente'
    END as estado
FROM horas_trabajadas ht
JOIN usuario u ON ht.user_id = u.id
ORDER BY ht.work_date DESC
LIMIT 10;

-- Verificar tablas creadas
SELECT 
    TABLE_NAME as 'Tabla',
    TABLE_ROWS as 'Registros',
    ROUND(((DATA_LENGTH + INDEX_LENGTH) / 1024 / 1024), 2) as 'Tamaño_MB',
    TABLE_COMMENT as 'Descripción'
FROM information_schema.TABLES 
WHERE TABLE_SCHEMA = 'usuarios_urban_coop' 
ORDER BY TABLE_NAME;

SELECT '=== INSTALACIÓN COMPLETADA ===' as resultado;